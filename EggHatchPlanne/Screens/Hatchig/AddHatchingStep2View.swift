import SwiftUI

struct AddHatchingStep2View: View {
    
    /// –†–æ—É—Ç–µ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    @EnvironmentObject private var appRouter: AppRouter
    
    /// –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Tabbar
    @EnvironmentObject private var tabbarService: TabbarService
    
    /// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –≤—ã–ª—É–ø–ª–µ–Ω–∏–π
    var hatchingViewModel: HatchingViewModel
    
    // MARK: - State
    @State private var chickName: String = ""
    @State private var tag: String = ""
    @FocusState private var isChickNameFieldFocused: Bool
    @FocusState private var isTagFieldFocused: Bool
    
    var body: some View {
        ZStack(alignment: .center) {
            MainBGView()
                .onTapGesture {
                    // –°–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ —Ç–∞–ø–µ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
                    isChickNameFieldFocused = false
                    isTagFieldFocused = false
                }
            
            VStack(spacing: 16) {
                
                Spacer(minLength: 0)
                
                // –ü–æ–ª–µ –∏–º–µ–Ω–∏ —Ü—ã–ø–ª–µ–Ω–∫–∞
                HStack(alignment: .top, spacing: 8) {
                    Text("üê•")
                        .font(.customFont(font: .bold, size: 20))
                        .foregroundColor(.white)
                        .padding(.top, 2)
                    
                    TextField("Chick Name (optional)", text: $chickName)
                        .font(.customFont(font: .bold, size: 20))
                        .foregroundColor(.white)
                        .textCase(.uppercase)
                        .focused($isChickNameFieldFocused)
                    
                    Spacer()
                }
                .padding()
                .background(
                    RoundedRectangle(cornerRadius: 17)
                        .fill(.customDarkGray)
                )
                
                // –ü–æ–ª–µ —Ç–µ–≥–∞
                HStack(alignment: .top, spacing: 8) {
                    Text("üìç")
                        .font(.customFont(font: .bold, size: 20))
                        .foregroundColor(.white)
                        .padding(.top, 2)
                    
                    TextField("Tag (optional)", text: $tag)
                        .font(.customFont(font: .bold, size: 20))
                        .foregroundColor(.white)
                        .textCase(.uppercase)
                        .focused($isTagFieldFocused)
                    
                    Spacer()
                }
                .padding()
                .background(
                    RoundedRectangle(cornerRadius: 17)
                        .fill(.customDarkGray)
                )
                
                Spacer(minLength: 0)
                
                // –ö–Ω–æ–ø–∫–∏
                HStack(spacing: 16) {
                    // –ö–Ω–æ–ø–∫–∞ Skip
                    UniversalButton(
                        color: Color("customYellow"),
                        isDisabled: false,
                        text: "skip",
                        size: 20,
                        pading: 52
                    ) {
                        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –±–µ–∑ –∏–º–µ–Ω–∏ –∏ —Ç–µ–≥–∞
                        saveHatching()
                    }
                    
                    // –ö–Ω–æ–ø–∫–∞ Save
                    UniversalButton(
                        color: (chickName.isEmpty && tag.isEmpty) ? Color("customYellow").opacity(0.25) : Color("customYellow"),
                        isDisabled: chickName.isEmpty && tag.isEmpty,
                        text: "save",
                        size: 20,
                        pading: 52
                    ) {
                        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏
                        saveHatching()
                    }
                }
            }
            .padding(.horizontal)
            .padding(.top, AppConfig.isIPhoneSE3rdGeneration ? 118 : 80)
            .padding(.bottom, AppConfig.adaptiveTabbarHeight + (AppConfig.isIPhoneSE3rdGeneration ? 150 : 92))
        }
        .navigationBarTitleDisplayMode(.inline)
        .navigationBarBackButtonHidden()
        .toolbar {
            ToolbarItem(placement: .topBarLeading) {
                Image(.backButton)
                    .onTapGesture {
                        appRouter.hatchingRoute.removeLast()
                    }
            }
            
            ToolbarItem(placement: .principal) {
                Image(.addHatching)
            }
            
            ToolbarItemGroup(placement: .keyboard) {
                Spacer()
                Button("Done") {
                    isTagFieldFocused = false
                    isChickNameFieldFocused = false
                }
            }
        }
    }
    
    // MARK: - Helper Methods
    
    private func saveHatching() {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–æ–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
        hatchingViewModel.createHatchingFromTempData(
            chickName: chickName.isEmpty ? nil : chickName,
            tag: tag.isEmpty ? nil : tag
        )
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        tabbarService.isTabbarVisible = true
        appRouter.hatchingRoute.removeAll()
    }
}

#Preview {
    NavigationStack {
        AddHatchingStep2View(hatchingViewModel: HatchingViewModel())
            .environmentObject(AppRouter())
            .environmentObject(TabbarService())
    }
}
